// Generate with
// flatc --scoped-enums --reflect-names --gen-mutable -c noodles.fbs

namespace noodles;


/*

Update semantics:
Unless otherwise specified, updates are value-like atomic. That is, the client
should reconstruct the local representation of the entity. This is opposed to a
non-atomic delta-like update; where only mentioned fields in the table should
be updated in the local representation.

Coordinate system semantics:
We follow the OpenGL style for coordinates and orientations (right handed).
Units are in SI.
- Lengths are in meters.

*/

// =============================================================================
// Common Types ================================================================
// =============================================================================

// Identifiers are tables, due to poor language support for structs.

table ObjectID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table PlotID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table TableID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table SignalID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table MethodID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table MaterialID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table GeometryID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table LightID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table ImageID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table TextureID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table BufferID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

table BufferViewID {
    id_slot : uint32 = 4294967295;
    id_gen  : uint32 = 4294967295;
}

union AnyIDType {
    ObjectID,
    TableID,
    SignalID,
    MethodID,
    MaterialID,
    GeometryID,
    LightID,
    ImageID,
    TextureID,
    BufferID,
    BufferViewID,
    PlotID
}

table AnyID {
    id : AnyIDType (required);
}

table MapEntry {
    name  : string (key);
    value : Any;
}

table Text { text : string; }
table Integer { integer : int64; }
table IntegerList { integers : [int64]; }
table Real { real : double; }
table RealList { reals : [double]; }
table Data { data : [byte]; }
table AnyList { list : [Any]; }
table AnyMap { entries : [MapEntry]; }

union AnyType {
    Text,
    Integer,
    IntegerList,
    Real,
    RealList,
    Data,
    AnyList,
    AnyMap,
    AnyID
}

table Any {
    any : AnyType;
}

enum Format : byte {
    U8,
    U16,
    U32,

    U8VEC4,

    U16VEC2,

    VEC2,
    VEC3,
    VEC4,

    MAT3,
    MAT4,
}

// Misc Types ==================================================================

struct Vec2 {
    x : float;
    y : float;
}

struct Vec3 {
    x : float;
    y : float;
    z : float;
}

struct Vec4 {
    x : float;
    y : float;
    z : float;
    w : float;
}

struct Mat4 {
    // for javascript compat, we have to expand the below:
    // components : [float : 16];
    c1 : Vec4;
    c2 : Vec4;
    c3 : Vec4;
    c4 : Vec4;
}

struct BoundingBox {
    aabb_min : Vec3;
    aabb_max : Vec3;
}

struct RGB {
    r : uint8;
    g : uint8;
    b : uint8;
}

struct RGBA {
    r : uint8;
    g : uint8;
    b : uint8;
    a : uint8;
}

// =============================================================================
// Server Messages =============================================================
// =============================================================================

table MethodArg {
    // What is the name for this method argument?
    name : string (required);

    // Documentation for users; what does this argument do?
    doc  : string;

    // Optional hint of the type of this argument
    // Any value in AnyType (as text) is valid.
    hint : string;

    // Optional Control hint for gui editors.
    // Currently known values
    // - 'EditCheckbox'
    // - 'EditSlider:min:max'
    editor_hint : string;
}

// Create a new method
table MethodCreate {
    id            : MethodID (required); // The new method's ID
    name          : string (required);   // Non-unique name of method
    documentation : string;              // Optional docstring for method
    return_doc    : string;              // Optional return value documentation
    arg_doc       : [ MethodArg ];       // Arguments to method
}

// Destroy a method
table MethodDelete {
    id            : MethodID (required);
}

// =============================================================================

// Create a new signal
table SignalCreate {
    id             : SignalID (required); // The new signal's ID
    name           : string (required);   // Non-unique name of signal
    documentation  : string;              // Optional signal docstring
    arg_doc        : [ MethodArg ];       // Data provided with signal
}

// Delete a signal
table SignalDelete {
    id             : SignalID (required);
}

// =============================================================================

// The 'has no visual representation' type
table EmptyDefinition {
    padding : bool = false; // cannot be empty
}

// Render this object as text
table TextDefinition { // Text plane, normal -z, up is +y, center: obj origin
    text   : string (required); // String to render
    font   : string (required); // Approximate font to use (e.g. Arial)
    height : float = .25; // The height of the text plane.
    width  : float = -1; // Optional width of text, infer from height if < 0
}

// Render this object as a web page
table WebpageDefinition {
    url    : string (required);
    height : float = .5;
    width  : float = .5;
}

// Render this object as a mesh
table RenderableDefinition {
    material    : MaterialID (required);
    mesh        : [GeometryID] (required);
    instances   : StructuredAttribute; // optional, only mat4 allowed
    instance_bb : BoundingBox; // optional override for instanced object culling
}

union ObjectDefinition {
    EmptyDefinition,
    TextDefinition,
    WebpageDefinition,
    RenderableDefinition
}

struct ObjectVisibility {
    visible : bool;
}

// Create or update an object.
// Non-atomic update semantics
table ObjectCreateUpdate {
    id           : ObjectID (required);
    name         : string;
    parent       : ObjectID;
    transform    : Mat4;
    definition   : ObjectDefinition;
    lights       : [LightID];
    tables       : [TableID];
    plots        : [PlotID];
    tags         : [string];
    methods_list : [MethodID];
    signals_list : [SignalID]; // Dont use "signals" to avoid Qt conflict.
    influence    : BoundingBox;
    visibility   : ObjectVisibility;
}

table ObjectDelete {
    id        : ObjectID (required);
}

// =============================================================================

table SimplePlot {
    definition : string (required);
}

table URLPlot {
    url : string (required);
}

union PlotType {
    SimplePlot,
    URLPlot
}

// non-atomic update semantics
table PlotCreateUpdate {
    id           : PlotID (required);
    table        : TableID;
    type         : PlotType;
    methods_list : [MethodID];
    signals_list : [SignalID];
}

table PlotDelete {
    id        : PlotID (required);
}

// =============================================================================

table BufferCreate {
    id       : BufferID (required);
    size     : uint64; // Size of buffer

    // where does the data come from?
    // one option is inline
    bytes    : [byte]; // limited in size.
    // or
    url      : string; // url to download data from 
}

table BufferDelete {
    id    : BufferID (required);
}

// =============================================================================

enum ViewType {
    UNKNOWN,
    VERTEX_INFO,
    INDEX_INFO,
    IMAGE_INFO,
}

table BufferViewCreate {
    id            : BufferViewID (required);
    source_buffer : BufferID (required);

    type   : ViewType (required);
    offset : uint64 = 0;
    length : uint64 = 0;
}

table BufferViewDelete {
    id    : BufferID (required);
}

// =============================================================================

// Textures may be assumed to be in SRGB. If so, they must be decoded to linear
// before use in shaders, etc.

table TextureRef {
    texture_id         : TextureID;
    texture_coord_slot : uint8;
    transform          : Mat3;
}

table PBRInfo {
    base_color          : RGBA; // default is 255 for all channels.
    base_color_texture  : TextureRef; // assumed to be SRGB. no premult alpha

    metallic            : float = 1;
    roughness           : float = 1;
    metal_rough_texture : TextureRef; // assumed to be linear. ONLY RG used
}

// non-atomic update semantics
table MaterialCreateUpdate {
    id           : MaterialID (required);

    pbrInfo        : PBRInfo; // if missing, assume defaults.
    normal_texture : TextureRef;

    occlusion_texture        : TextureRef; // assumed to be linear. ONLY R
    occlusion_texture_factor : float = 1;

    emissive_texture : TextureRef; // assumed to be SRGB. ignore A.
    emissive_factor  : Vec3;

    use_alpha    : bool  = false;
    alpha_cutoff : float = .5;

    double_sided : bool = false;
}

table MaterialDelete {
    id           : MaterialID (required);
}

// =============================================================================

table ImageCreate {
    id       : ImageID (required);

    // color space information must be ignored

    // either
    reference : BufferViewID;
    // or
    url : string;
}

table ImageDelete {
    id        : ImageID (required);
}

// =============================================================================

table TextureCreate {
    id    : TextureID (required);
    image : ImageID (required);

    // need samplers?
}

table TextureDelete {
    id        : TextureID (required);
}

// =============================================================================

enum LightType : byte {
    POINT = 0,
    SUN, //Direct light along +Z
}

// non-atomic update semantics
table LightCreateUpdate {
    id         : LightID (required);
    color      : RGB;
    intensity  : float;
    spatial    : Vec4;
    light_type : LightType; // after being set once, updates ignored
}
table LightDelete {
    id        : LightID (required);
}

// =============================================================================

struct StructuredAttribute { 
    // All elements required, but not expressable in this spec
    id     : BufferViewID (required);
    stride : uint64 = 0;
    format : Format;
}

enum PrimitiveType : byte {
    POINTS,
    LINES,
    LINE_LOOP,
    LINE_STRIP,
    TRIANGLES,
    TRIANGLE_STRIP,
    TRIANGLE_FAN
}

table GeometryPatch {
    // renderable extent of this geometry patch
    extent : BoundingBox;

    positions  : StructuredAttribute; // at the moment, should only be vec3
    normals    : StructuredAttribute; // at the moment, should only be vec3
    tangent    : StructuredAttribute; // at the moment, should only be vec3
    tex_coords : StructuredAttribute; // vec2, u16vec2
    colors     : StructuredAttribute; // u8vec4

    // optional, if missing, non-indexed primitives only
    indicies   : StructuredAttribute; // u8, u16, u32

    type : PrimitiveType = PrimitiveType::TRIANGLES;
}

table GeometryCreate {
    id : GeometryID (required); // id of the new geometry

    patches : [ GeometryPatch ];    
}

table GeometryDelete {
    id : GeometryID (required);
}

// =============================================================================

// non-atomic update semantics
table TableCreateUpdate {
    id           : TableID (required);
    name         : string;
    meta         : string;
    methods_list : [ MethodID ];
    signals_list : [ SignalID ];
}

table TableDelete {
    id      : TableID (required);
}

// =============================================================================

table DocumentUpdate {
    methods_list  : [ MethodID ];
    signals_list  : [ SignalID ];
}

table DocumentReset {
    padding : bool; // these things cannot be empty, so...
}

// =============================================================================

table SignalInvoke {
    id  : SignalID (required);

    // if the two below are not set, it is on the document
    on_object : ObjectID;
    on_table  : TableID;
    on_plot   : PlotID;

    signal_data  : AnyList;
}

table MethodException {
    code    : int64;  // required
    message : string; // optional
    data    : Any;    // optional
}

table MethodReply {
    invoke_ident     : string (required);
    method_data      : Any;             // optional
    method_exception : MethodException; // optional
}

// =============================================================================

union ServerMessageType {
    MethodCreate,
    MethodDelete,
    SignalCreate,
    SignalDelete,
    ObjectCreateUpdate,
    ObjectDelete,
    BufferCreate,
    BufferDelete,
    BufferViewCreate,
    BufferViewDelete,
    MaterialCreateUpdate,
    MaterialDelete,
    TextureCreate,
    TextureDelete,
    ImageCreate,
    ImageDelete,
    LightCreateUpdate,
    LightDelete,
    GeometryCreate,
    GeometryDelete,
    TableCreateUpdate,
    TableDelete,
    DocumentUpdate,
    DocumentReset,
    SignalInvoke,
    MethodReply
}

table ServerMessage {
    message : ServerMessageType;
}

// Root type for server messages
table ServerMessages {
    messages : [ ServerMessage ];
}

// =============================================================================
// Client Messages =============================================================
// =============================================================================

table IntroductionMessage {
    client_name : string (required);
    version : uint32 = 0;
}

table MethodInvokeMessage {
    method_id : MethodID (required);

    // if any of the below is not set, it is on the document
    on_object : ObjectID;
    on_table  : TableID;
    on_plot   : PlotID;

    invoke_ident : string (required);
    method_args  : AnyList;
}

table AssetRefreshMessage {
    for_buffers : [ BufferID ] (required);
}

union ClientMessageType {
    IntroductionMessage,
    MethodInvokeMessage,
    AssetRefreshMessage
}

table ClientMessage {
    content : ClientMessageType (required);
}

// Root type for client messages
table ClientMessages {
    messages : [ ClientMessage ] (required);
}
